import abc

from abc import ABC
from abc import abstractmethod

from typing import Any
from typing import Iterable

from pure_protobuf.enums import WireType as WireType
from pure_protobuf.io_ import IO as IO
from pure_protobuf.io_ import Dumps as Dumps
from pure_protobuf.serializers import Serializer as Serializer
from pure_protobuf.serializers import bytes_serializer as bytes_serializer
from pure_protobuf.serializers import (
    unsigned_varint_serializer as unsigned_varint_serializer,
)

class Field(Dumps, ABC, metaclass=abc.ABCMeta):
    number: Any = ...
    name: Any = ...
    serializer: Any = ...
    wire_type: Any = ...
    def __init__(
        self, number: int, name: str, serializer: Serializer
    ) -> None: ...
    @abstractmethod
    def validate(self, value: Any) -> Any: ...
    @abstractmethod
    def dump(self, value: Any, io: IO) -> Any: ...
    def dump_key(self, io: IO) -> Any: ...
    @abstractmethod
    def load(self, wire_type: WireType, io: IO) -> Any: ...
    @abstractmethod
    def merge(self, old_value: Any, new_value: Any) -> Any: ...

class NonRepeatedField(Field):
    is_optional: Any = ...
    def __init__(
        self, number: int, name: str, serializer: Serializer, is_optional: bool
    ) -> None: ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, wire_type: WireType, io: IO) -> Any: ...
    def merge(self, old_value: Any, new_value: Any) -> Any: ...

class RepeatedField(Field, ABC, metaclass=abc.ABCMeta):
    def validate(self, value: Any) -> Any: ...
    def load(self, wire_type: WireType, io: IO) -> Any: ...
    def load_packed(self, bytes_: bytes) -> Iterable[Any]: ...
    def merge(self, old_value: Any, new_value: Any) -> Any: ...

class UnpackedRepeatedField(RepeatedField):
    def dump(self, value: Any, io: IO) -> Any: ...

class PackedRepeatedField(RepeatedField):
    wire_type: Any = ...
    def __init__(
        self, number: int, name: str, serializer: Serializer
    ) -> None: ...
    def dump(self, value: Any, io: IO) -> Any: ...
