import dataclasses

from abc import ABC

from typing import Any
from typing import ClassVar
from typing import Type
from typing import TypeVar

from pure_protobuf.fields import Field
from pure_protobuf.io_ import IO
from pure_protobuf.serializers import Serializer

T = TypeVar("T")

class Message(ABC):
    serializer: ClassVar[Serializer]
    type_url: ClassVar[str]
    def validate(self) -> None: ...
    def dump(self, io: IO) -> Any: ...
    def dumps(self) -> bytes: ...
    def merge_from(self, other: T) -> Any: ...

class OneOf:
    fields: Any = ...
    def __init__(self, *fields: Field) -> None: ...
    def __get__(self, message_: Message, owner: Type = ...) -> Any: ...

def load(cls: Type[T], io: IO) -> T: ...
def loads(cls: Type[T], bytes_: bytes) -> T: ...
def field(number: int, *args: Any, **kwargs: Any) -> dataclasses.Field: ...
def message(cls: Type[T]) -> Type[T]: ...
