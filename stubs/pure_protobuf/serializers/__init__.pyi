import abc

from abc import ABC
from enum import IntEnum

from typing import Any
from typing import Type

from pure_protobuf import types as types
from pure_protobuf.enums import WireType as WireType
from pure_protobuf.io_ import IO as IO
from pure_protobuf.io_ import Dumps as Dumps
from pure_protobuf.io_ import Loads as Loads

class Serializer(Dumps, Loads, ABC, metaclass=abc.ABCMeta):
    wire_type: WireType
    def validate(self, value: Any) -> Any: ...
    def merge(self, old_value: Any, new_value: Any) -> Any: ...

class UnsignedVarintSerializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

unsigned_varint_serializer: Any

class SignedVarintSerializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

signed_varint_serializer: Any

class BytesSerializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

bytes_serializer: Any

class StringSerializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class UnsignedInt32Serializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class UnsignedInt64Serializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class SignedInt32Serializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class SignedInt64Serializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class BooleanSerializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class SignedFixed32Serializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class UnsignedFixed32Serializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class SignedFixed64Serializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class UnsignedFixed64Serializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class FloatSerializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class DoubleSerializer(Serializer):
    wire_type: Any = ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class IntEnumSerializer(Serializer):
    wire_type: Any = ...
    type_: Any = ...
    def __init__(self, type_: Type[IntEnum]) -> None: ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...

class MessageSerializer(Serializer):
    wire_type: Any = ...
    type_: Any = ...
    def __init__(self, type_: Any) -> None: ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...
    def merge(self, old_value: Any, new_value: Any) -> Any: ...

class PackingSerializer(Serializer):
    wire_type: Any = ...
    inner: Any = ...
    def __init__(self, inner: Serializer) -> None: ...
    def validate(self, value: Any) -> Any: ...
    def dump(self, value: Any, io: IO) -> Any: ...
    def load(self, io: IO) -> Any: ...
    def merge(self, old_value: Any, new_value: Any) -> Any: ...

def read_varint(io: IO) -> types.uint: ...
def write_varint(value: types.uint, io: IO) -> Any: ...
def skip_varint(io: IO) -> Any: ...
def skip_fixed_32(io: IO) -> Any: ...
def skip_fixed_64(io: IO) -> Any: ...
def skip_bytes(io: IO) -> Any: ...

SKIP: Any
